#!/usr/bin/env python3

import os, sys, subprocess
import shutil
from functools import lru_cache

assert os.path.samefile("./test", __file__), "you need to run this from the repo root as ./test"
tests_root = os.path.abspath("./.tests")

all_tests = []
def test(f):
    def wrapped():
        print("{}...".format(f.__name__), end="", flush=True)
        try:
            f(f.__name__)
        except:
            print("fail")
            raise
        print("pass")
    all_tests.append(wrapped)
    return wrapped

def main():
    for f in all_tests:
        f()

@test
def follow_branch(test_name):
    down, up = init(test_name, "downstream", "upstream")
    git_vendor("add",
        "--dir", "vendor/up",
        "--url", up,
        "--follow-branch", "main",
        cwd=down)
    git("commit",
        "-m", "vendor upstream",
        cwd=down)
    assert git_rev_parse_verify("HEAD:vendor/up", cwd=down) == git_rev_parse_verify("HEAD^{tree}", cwd=up)

    clone = git_clone(down, "clone")

    set_file(up, "new_file.txt")
    git_vendor("update", cwd=down)
    git("commit",
        "-m", "update upstream",
        cwd=down)

    git("pull", "-q", cwd=clone)
    assert git_rev_parse_verify("HEAD:vendor/up", cwd=down) == git_rev_parse_verify("HEAD^{tree}", cwd=up)

@test
def pin_to_tag(test_name):
    down, up = init(test_name, "downstream", "upstream")
    git("tag", "v1.0.0", cwd=up)

    git_vendor("add",
        "--dir", "vendor/up",
        "--url", up,
        "--pin-to-tag", "v1.0.0",
        cwd=down)
    git("commit",
        "-m", "vendor upstream",
        cwd=down)

    # Break fetching from this repo.
    os.rename(up, up + ".hidden")

    # Updating should trigger no errors, because it should not fetch.
    git_vendor("update", cwd=down)

@test
def pin_to_commit(test_name):
    down, up = init(test_name, "downstream", "upstream")
    commit_sha1 = git_rev_parse_verify("HEAD", cwd=up)
    upstream_tree = git_rev_parse_verify("HEAD^{tree}", cwd=up)

    # Make sure the commit isn't any tip.
    set_file(up, "new_file.txt")
    assert commit_sha1 != git_rev_parse_verify("HEAD", cwd=up)

    git_vendor("add",
        "--dir", "vendor/up",
        "--url", up,
        "--pin-to-commit", commit_sha1,
        cwd=down)
    git("commit",
        "-m", "vendor upstream",
        cwd=down)
    assert git_rev_parse_verify("HEAD:vendor/up", cwd=down) == upstream_tree

    # Break fetching from this repo.
    os.rename(up, up + ".hidden")

    # Updating should trigger no errors, because it should not fetch.
    git_vendor("update", cwd=down)

@test
def edit_config_through_cli(test_name):
    down, up = init(test_name, "downstream", "upstream")
    non_vendoring_entire_tree = git_rev_parse_verify("HEAD^{tree}", cwd=down)

    git_vendor("add",
        "--dir", "vendor/up",
        "--url", up,
        "--follow-branch", "main",
        cwd=down)
    git("commit",
        "-m", "vendor upstream",
        cwd=down)
    assert git_rev_parse_verify("HEAD:vendor/up", cwd=down) == git_rev_parse_verify("HEAD^{tree}", cwd=up)

    # Rename
    git_vendor("mv",
        "--dir", "vendor/up",
        "--new-dir", "vendor/up2",
        cwd=down)
    git("commit",
        "-m", "rename upstream",
        cwd=down)
    assert git_rev_parse_verify("HEAD:vendor/up2", cwd=down) == git_rev_parse_verify("HEAD^{tree}", cwd=up)

    # Remove
    git_vendor("rm",
        "--dir", "vendor/up2",
        cwd=down)
    git("commit",
        "-m", "remove vendored content",
        cwd=down)
    assert git_rev_parse_verify("HEAD^{tree}", cwd=down) == non_vendoring_entire_tree

# TODO add new tests here

@test
def clean_preserves_ignored(test_name):
    down, up = init(test_name, "downstream", "upstream")
    first_commit = git_rev_parse_verify("HEAD", cwd=up)

    prefix = ""
    for i in range(5):
        set_file(up, prefix + ".gitignore", contents="/a/.gitignore\n")
        prefix += "a/"

    later_commit = git_rev_parse_verify("HEAD", cwd=up)

    set_file(down, ".gitignore", contents="*.ignored\n")

    git_vendor("add",
        "--dir", "vendor/up",
        "--url", up,
        "--pin-to-commit", later_commit,
        cwd=down)
    assert os.path.isdir(os.path.join(down, "vendor/up", "a"))
    git("commit",
        "-m", "vendor upstream",
        cwd=down)

    set_file(down, "vendor/up/trash.ignored")

    git_vendor("set",
        "--dir", "vendor/up",
        "--pin-to-commit", first_commit,
        cwd=down)
    git("commit",
        "-m", "remove most vendored content",
        cwd=down)
    assert not os.path.isdir(os.path.join(down, "vendor/up/a"))
    assert os.path.isfile(os.path.join(down, "vendor/up/trash.ignored"))


def init(test_name, downstream_repo_dir_name, *upstream_repo_names):
    test_dir = os.path.join(tests_root, test_name)
    try:
        shutil.rmtree(test_dir)
    except FileNotFoundError:
        pass
    os.makedirs(test_dir)

    repo_dirs = []
    for dir_name in (downstream_repo_dir_name,) + upstream_repo_names:
        repo_dir = os.path.join(test_dir, dir_name)
        os.makedirs(repo_dir)
        git("init",
            "--initial-branch", "main",
            cwd=repo_dir)
        git("commit",
            "--allow-empty",
            "-m", "init repo: " + dir_name,
            cwd=repo_dir)
        set_file(repo_dir, dir_name + ".txt")

        repo_dirs.append(repo_dir)

    return repo_dirs

def set_file(repo_dir, file_name, *, contents=None, commit=True):
    if contents == None:
        contents = "the contents of {}\n".format(file_name)
    full_path = os.path.join(repo_dir, file_name)
    os.makedirs(os.path.dirname(full_path), exist_ok=True)
    with open(os.path.join(repo_dir, file_name), "w") as f:
        f.write(contents)
    if commit:
        git("add", "-f", file_name, cwd=repo_dir)
        git("commit", "-m", "set file: " + file_name, cwd=repo_dir)

def git_clone(origin_dir, repo_name):
    test_dir = os.path.dirname(origin_dir)
    repo_dir = os.path.join(test_dir, repo_name)
    git("clone", "-q", origin_dir, repo_dir, cwd=test_dir)

    return repo_dir

def git_rev_parse_verify(arg, *, cwd):
    return git("rev-parse", "--verify", arg, cwd=cwd).rstrip()

def git(*args, cwd):
    cmd = ["git"]
    cmd.extend(args)
    process = subprocess.run(cmd,
        cwd=cwd, env=get_git_env(),
        check=True, stdout=subprocess.PIPE, encoding="utf8",
    )
    return process.stdout

def git_vendor(*args, cwd):
    cmd = [os.path.abspath("./git-vendor")]
    cmd.extend(args)
    subprocess.run(cmd,
        cwd=cwd, env=get_git_env(),
        check=True, capture_output=True, encoding="utf8",
    )

@lru_cache()
def get_git_env():
    """
    We want commit hashes to be deterministic across time and different users running the test suite.
    This environment disables all user configuration and system configuration for git's behavior,
    and freezes time at a constant date.
    """
    # Start with a copy of our own environment, then scrub out any git-specific configuration.
    git_env = os.environ.copy()
    for name in list(git_env.keys()):
        if name.startswith("GIT_"):
            del git_env[name]

    # Disable reading /etc/gitconfig.
    git_env["GIT_CONFIG_NOSYSTEM"] = "1"
    # Ensure ~/.gitconfig is never used.
    git_env["HOME"] = "/dev/null"

    # Don't expose system information when making commits.
    git_env["GIT_AUTHOR_NAME"] = git_env["GIT_COMMITTER_NAME"] = "Nobody"
    git_env["GIT_AUTHOR_EMAIL"] = git_env["GIT_COMMITTER_EMAIL"] = "nobody@none.invalid"
    # Don't expose current time when making commits.
    earliest_allowed_time = "100000000 +0000" # "Sat Mar 3 09:46:40 1973 +0000"
    git_env["GIT_AUTHOR_DATE"] = git_env["GIT_COMMITTER_DATE"] = earliest_allowed_time

    return git_env

if __name__ == "__main__":
    main()
